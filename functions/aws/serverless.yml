service: supers-files

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  timeout: 30
  memorySize: 512
  
  # Enable binary media types for API Gateway
  apiGateway:
    binaryMediaTypes:
      - '*/*'
      - 'multipart/form-data'
      - 'image/*'
      - 'video/*'
      - 'audio/*'
      - 'application/pdf'
      - 'application/octet-stream'
  
  # Load runtime env values from a fixed file to avoid accidental shell bleed
  environment: ${file(./env-runtime.js)}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:ListBucket
            - s3:HeadObject
          Resource:
            - "arn:aws:s3:::${self:provider.environment.AWS_S3_BUCKET_NAME}"
            - "arn:aws:s3:::${self:provider.environment.AWS_S3_BUCKET_NAME}/*"
        # DynamoDB permissions
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME, 'Supers-Posts'}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NAME, 'Supers-Posts'}/index/*"
        # Basic Lambda execution permissions
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:${self:provider.region}:*:*"

# Optimize packaging to avoid the 262MB limit
package:
  patterns:
    - '!.git/**'
    - '!.serverless/**'
    - '!.vscode/**'
    - '!test/**'
    - '!tests/**'
    - '!*.test.js'
    - '!*.spec.js'
    - '!coverage/**'
    - '!*.md'
    - '!log-checker.md'
    - '!package-lock.json'
    - '!yarn.lock'
    - '!Dockerfile'
    - '!.dockerignore'

functions:
  auth-login:
    handler: auth-login.handler
    events:
      - http:
          path: auth/login
          method: post
          cors:
            origin: ${self:provider.environment.ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  auth-verify:
    handler: auth-verify.handler
    events:
      - http:
          path: auth/verify
          method: get
          cors:
            origin: ${self:provider.environment.ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  files-list:
    handler: files-list.handler
    events:
      - http:
          path: files
          method: get
          cors:
            origin: ${self:provider.environment.ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  files-upload:
    handler: files-upload.handler
    timeout: 30
    events:
      - http:
          path: files/upload
          method: post
          cors:
            origin: ${self:provider.environment.ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  files-presigned-url:
    handler: files-presigned-url.handler
    timeout: 30
    events:
      - http:
          path: files/presigned-url
          method: post
          cors:
            origin: ${self:provider.environment.ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  files-delete:
    handler: files-delete.handler
    events:
      - http:
          path: files/{id}
          method: delete
          cors:
            origin: ${self:provider.environment.ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  # Posts API Functions
  posts-list:
    handler: posts-list.handler
    events:
      - http:
          path: posts
          method: get
          cors:
            origin: ${self:provider.environment.ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  posts-get:
    handler: posts-get.handler
    events:
      - http:
          path: posts/{id}
          method: get
          cors:
            origin: ${self:provider.environment.ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  posts-create:
    handler: posts-create.handler
    events:
      - http:
          path: posts
          method: post
          cors:
            origin: ${self:provider.environment.ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  posts-update:
    handler: posts-update.handler
    events:
      - http:
          path: posts/{id}
          method: put
          cors:
            origin: ${self:provider.environment.ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

  posts-delete:
    handler: posts-delete.handler
    events:
      - http:
          path: posts/{id}
          method: delete
          cors:
            origin: ${self:provider.environment.ALLOWED_ORIGIN}
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false

plugins:
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3001
    host: localhost
    cors: true
  dotenv:
    path: ${file(./dotenv-config.js)}
    exclude:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION

resources:
  Resources:
    # SupersFilesBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${env:AWS_S3_BUCKET_NAME}
    #     PublicAccessBlockConfiguration:
    #       BlockPublicAcls: false
    #       BlockPublicPolicy: false
    #       IgnorePublicAcls: false
    #       RestrictPublicBuckets: false
    #     CorsConfiguration:
    #       CorsRules:
    #         - AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
    #           AllowedOrigins: ['*']
    #           AllowedHeaders: ['*']
    #           ExposedHeaders: ['ETag', 'x-amz-version-id']
    #           MaxAge: 86400

    # SupersFilesBucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket: ${env:AWS_S3_BUCKET_NAME}
    #     PolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Sid: PublicReadGetObject
    #           Effect: Allow
    #           Principal: '*'
    #           Action: 's3:GetObject'
    #           Resource: 'arn:aws:s3:::${env:AWS_S3_BUCKET_NAME}/*'

    # SupersPostsTable: 
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: ${env:DYNAMODB_TABLE_NAME, 'Supers-Posts'}
    #     AttributeDefinitions:
    #       - AttributeName: PK
    #         AttributeType: S
    #       - AttributeName: SK
    #         AttributeType: S
    #       - AttributeName: created_at
    #         AttributeType: S
    #       - AttributeName: status
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: PK
    #         KeyType: HASH
    #       - AttributeName: SK
    #         KeyType: RANGE
    #     GlobalSecondaryIndexes:
    #       - IndexName: CreatedAtIndex
    #         KeySchema:
    #           - AttributeName: status
    #             KeyType: HASH
    #           - AttributeName: created_at
    #             KeyType: RANGE
    #         Projection:
    #           ProjectionType: ALL
    #         ProvisionedThroughput:
    #           ReadCapacityUnits: 5
    #           WriteCapacityUnits: 5
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 10
    #       WriteCapacityUnits: 10
